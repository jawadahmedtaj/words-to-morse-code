{"version":3,"sources":["MorsePlayer.js","Assets/sound/A.wav","Assets/sound/B.wav","Assets/sound/C.wav","Assets/sound/D.wav","Assets/sound/E.wav","Assets/sound/F.wav","Assets/sound/G.wav","Assets/sound/H.wav","Assets/sound/I.wav","Assets/sound/J.wav","Assets/sound/K.wav","Assets/sound/L.wav","Assets/sound/M.wav","Assets/sound/N.wav","Assets/sound/O.wav","Assets/sound/P.wav","Assets/sound/Q.wav","Assets/sound/R.wav","Assets/sound/S.wav","Assets/sound/T.wav","Assets/sound/U.wav","Assets/sound/V.wav","Assets/sound/W.wav","Assets/sound/X.wav","Assets/sound/Y.wav","Assets/sound/Z.wav","App.js","serviceWorker.js","index.js"],"names":["MorsePlayer","props","ASound","Audio","A","BSound","B","CSound","C","DSound","D","ESound","E","FSound","F","GSound","G","HSound","H","ISound","I","JSound","J","KSound","K","LSound","L","MSound","M","NSound","N","OSound","O","PSound","P","QSound","Q","RSound","R","SSound","S","TSound","T","USound","U","VSound","V","WSound","W","XSound","X","YSound","Y","ZSound","Z","playAudio","bind","handleChange","state","words","evt","preventDefault","this","split","setState","interval","forEach","word","index","setTimeout","upWord","toUpperCase","exp","eval","console","log","target","value","onSubmit","className","htmlFor","type","id","onChange","Component","module","exports","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.695b7207.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./MorsePlayer.css\";\r\n\r\nimport A from \"./Assets/sound/A.wav\";\r\nimport B from \"./Assets/sound/B.wav\";\r\nimport C from \"./Assets/sound/C.wav\";\r\nimport D from \"./Assets/sound/D.wav\";\r\nimport E from \"./Assets/sound/E.wav\";\r\nimport F from \"./Assets/sound/F.wav\";\r\nimport G from \"./Assets/sound/G.wav\";\r\nimport H from \"./Assets/sound/H.wav\";\r\nimport I from \"./Assets/sound/I.wav\";\r\nimport J from \"./Assets/sound/J.wav\";\r\nimport K from \"./Assets/sound/K.wav\";\r\nimport L from \"./Assets/sound/L.wav\";\r\nimport M from \"./Assets/sound/M.wav\";\r\nimport N from \"./Assets/sound/N.wav\";\r\nimport O from \"./Assets/sound/O.wav\";\r\nimport P from \"./Assets/sound/P.wav\";\r\nimport Q from \"./Assets/sound/Q.wav\";\r\nimport R from \"./Assets/sound/R.wav\";\r\nimport S from \"./Assets/sound/S.wav\";\r\nimport T from \"./Assets/sound/T.wav\";\r\nimport U from \"./Assets/sound/U.wav\";\r\nimport V from \"./Assets/sound/V.wav\";\r\nimport W from \"./Assets/sound/W.wav\";\r\nimport X from \"./Assets/sound/X.wav\";\r\nimport Y from \"./Assets/sound/Y.wav\";\r\nimport Z from \"./Assets/sound/Z.wav\";\r\n\r\nexport default class MorsePlayer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.ASound = new Audio(A);\r\n    this.BSound = new Audio(B);\r\n    this.CSound = new Audio(C);\r\n    this.DSound = new Audio(D);\r\n    this.ESound = new Audio(E);\r\n    this.FSound = new Audio(F);\r\n    this.GSound = new Audio(G);\r\n    this.HSound = new Audio(H);\r\n    this.ISound = new Audio(I);\r\n    this.JSound = new Audio(J);\r\n    this.KSound = new Audio(K);\r\n    this.LSound = new Audio(L);\r\n    this.MSound = new Audio(M);\r\n    this.NSound = new Audio(N);\r\n    this.OSound = new Audio(O);\r\n    this.PSound = new Audio(P);\r\n    this.QSound = new Audio(Q);\r\n    this.RSound = new Audio(R);\r\n    this.SSound = new Audio(S);\r\n    this.TSound = new Audio(T);\r\n    this.USound = new Audio(U);\r\n    this.VSound = new Audio(V);\r\n    this.WSound = new Audio(W);\r\n    this.XSound = new Audio(X);\r\n    this.YSound = new Audio(Y);\r\n    this.ZSound = new Audio(Z);\r\n\r\n    this.playAudio = this.playAudio.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n\r\n    this.state = {\r\n      words: \"\"\r\n    };\r\n  }\r\n\r\n  playAudio(evt) {\r\n    evt.preventDefault();\r\n    const words = this.state.words.split(\"\");\r\n    this.setState({ words: \"\" });\r\n\r\n    const interval = 2000; // how much time should the delay between two iterations be (in milliseconds)?\r\n    words.forEach((word, index) => {\r\n      setTimeout(() => {\r\n        if (word !== \" \") {\r\n          const upWord = word.toUpperCase();\r\n          const exp = \"this.\" + upWord + \"Sound.play()\";\r\n          eval(exp);\r\n          console.log(exp);\r\n        }\r\n      }, index * interval);\r\n    });\r\n\r\n    console.log(words);\r\n  }\r\n\r\n  handleChange(evt) {\r\n    //  if (evt.target.value.length < 2)\r\n    this.setState({ words: evt.target.value });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.playAudio} className=\"MorsePlayer\">\r\n          <label htmlFor=\"words\" className=\"MorsePlayer-label\">\r\n            Please enter word(s)\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"words\"\r\n            value={this.state.words}\r\n            onChange={this.handleChange}\r\n            className=\"MorsePlayer-input\"\r\n          ></input>\r\n          <button className=\"MorsePlayer-btn\">Play</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/A.5a636165.wav\";","module.exports = __webpack_public_path__ + \"static/media/B.3b27b51c.wav\";","module.exports = __webpack_public_path__ + \"static/media/C.f00db532.wav\";","module.exports = __webpack_public_path__ + \"static/media/D.7a0c1b40.wav\";","module.exports = __webpack_public_path__ + \"static/media/E.187d1ac0.wav\";","module.exports = __webpack_public_path__ + \"static/media/F.862f3439.wav\";","module.exports = __webpack_public_path__ + \"static/media/G.ad48508e.wav\";","module.exports = __webpack_public_path__ + \"static/media/H.24968334.wav\";","module.exports = __webpack_public_path__ + \"static/media/I.444e093a.wav\";","module.exports = __webpack_public_path__ + \"static/media/J.044b4c78.wav\";","module.exports = __webpack_public_path__ + \"static/media/K.2ce889d2.wav\";","module.exports = __webpack_public_path__ + \"static/media/L.55616ad7.wav\";","module.exports = __webpack_public_path__ + \"static/media/M.5d424455.wav\";","module.exports = __webpack_public_path__ + \"static/media/N.d37a10ba.wav\";","module.exports = __webpack_public_path__ + \"static/media/O.cafd1f58.wav\";","module.exports = __webpack_public_path__ + \"static/media/P.c9cefe7f.wav\";","module.exports = __webpack_public_path__ + \"static/media/Q.43938f7b.wav\";","module.exports = __webpack_public_path__ + \"static/media/R.9bd7c4c1.wav\";","module.exports = __webpack_public_path__ + \"static/media/S.0c1516bd.wav\";","module.exports = __webpack_public_path__ + \"static/media/T.ae96ba60.wav\";","module.exports = __webpack_public_path__ + \"static/media/U.bc56b595.wav\";","module.exports = __webpack_public_path__ + \"static/media/V.4fe691bf.wav\";","module.exports = __webpack_public_path__ + \"static/media/W.33b6d4f7.wav\";","module.exports = __webpack_public_path__ + \"static/media/X.d3910e8e.wav\";","module.exports = __webpack_public_path__ + \"static/media/Y.2ce53ecb.wav\";","module.exports = __webpack_public_path__ + \"static/media/Z.942c27d6.wav\";","import React from \"react\";\nimport \"./App.css\";\nimport MorsePlayer from \"./MorsePlayer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MorsePlayer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}